/*This is a pseudo class which targets all the elements within the <html> tag*/
:root {
  /* Variables in CSS are defined with -- at the begining*/
  --primary-color: #272727;
  --secondary-color: #FFE400;
  --dark-grey: #2b2b2b;
  --bg-color: #F9E9D0;
  --bg-color2: rgba(60, 43, 17, 0.92);
  --visit-color: #141414;
  --hover-color: #272727;
}

body {
  background-color: var(--bg-color);
  font-family: 'Roboto Condensed', sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.6;
}

h1 {
  font-size: 30px;
  font-weight: 700;
}

h2 {
  font-size: 24px;
  font-weight: 700;
}

h3 {
  font-size: 18px;
  font-weight: 700;
}

hr {
  margin-left: auto;
  margin-right: auto;
  height: 2px;
  background-color: var(--bg-color2);
  opacity: 0.5;
}

a {
  /* to access a CSS variable we need to use the var() function as shown below*/
  color: var(--primary-color);
}

a:visited {
  color: var(--visit-color);
}

a:active, a:hover, a:focus {
  color: var(--hover-color);
  text-decoration: none;
  cursor: pointer;
  opacity: 0.7;
}

button, .button {
  border: none;
  font-family: inherit;
  background-color: #14A76C;
  color: white;
  text-decoration: none;
  padding: 10px;
  border-radius: 4px;
  border-bottom: 2px solid rgba(0, 0, 0, 0.3);
  transition: 0.3s, opacity;
  /* Transitions can be specified in a single line*/
}

button:hover, button:focus, .button:hover, .button:focus {
  cursor: pointer;
  opacity: 0.8;
}

.button:hover {
  font-size: 18px;
  /*when yoou hover over the button, the size of the button increases*/
}

.button_secondary {
  background-color: var(--secondary-color);
  color: #2b2b2b;
}

.profile_potrait {
  float: left;
  width: 250px;
  height: 250px;
  margin-right: 40px;
  border-radius: 50%
}

.page-footer {
  clear: both;
  display: flex;
  flex-direction: column;
  text-align: center;
}

.profile {
  max-width: 700px;
  margin: 0 auto;
}

.about {
  max-width: 700px;
  margin: 0 auto;
  text-align: center;
}

.contact-form {
  text-align: center;
}

/* this styling will help to keep the actual width of 124px container mentioned to 100px even including the 20px padding and 4px borders.(this is very helpful when we are deciding the sizes with percentage value)*/
* {
  box-sizing: border-box;
}

.page-header {
  /*parent container covers the entire width of the page with 20px of padding*/
  display: flex;
  width: 100%;
  padding: 20px;
}

.page-header__item {
  /*gives both the child items a similar base behaviour before overriding a particular one */
  flex: 0 1 200px;
}

.page-header__item:last-child {
  /*logo takes up 200 px space but we want the navigation list to take up the rest of the space and be right aligned*/
  flex-grow: 1;
  /*over riding the flex property*/
  /*last-child is a pseudo selector which directs to the last child of the flex box item*/
  text-align: right;
}

.about-list {
  list-style-type: none;
}

.navigation-list {
  list-style-type: none;
}

.navigation-list li {
  display: inline-block;
  margin-left: 20px;
}

/* start grid fallback */
.projects__item {
  display: inline-block;
  width: 33%;
}

/* end grid fallback */
@supports (display:grid) {
  .projects {
    display: grid;
  }

  .projects {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    /*Fr is a flex unit used to allocate available space to grid items. Instead of using 300px, for example, you can use 1fr for each value because each grid item should be the same size*/
    grid-gap: 20px;
    /* In addition to changing the pixel values to fr, you may also want to add some spacing between the grid items. Rather than using margin, you can use this*/
    /*grid-template-columns: 300px 300px 300px; /*creates three columns with width of 300px each*/
    /*grid-template-rows: 300px 300px; /*creates two rows with 300px each*/
  }

  .projects__item {
    background-color: #61cfcb;
    width: auto;
    min-height: auto;
    margin: 0;
  }

  .projects__item:last-child {
    grid-column: 3 / 3;
    grid-row: 1 / 3;
  }
}

@media all and (max-width: 500px) {

  /*media queries- allows to specify sizes at which the rules should be applied*/
  .projects {
    grid-template-columns: 1fr;
    /*only propert that needs to be over-ride*/
  }
}

@media all and (min-width: 500px) and (max-width: 750px) {
  .projects {
    grid-template-columns: 1fr 1fr;
  }
}

@media all and (max-width: 750px) {
  .projects {
    grid-gap: 10px;
  }

  .projects__item:last-child {
    /* common propety to all the sizes*/
    grid-column: auto / auto;
    grid-row: auto / auto;
  }

  h1 {
    font-size: 22px;
  }
}

/*CSS Animations*/
@keyframes color-change {

  /*defining keyframe rule, color- change is simply a name given to animation(can be anything)*/
  from {
    fill: #fcfcfc;
  }

  to {
    fill: #f76414;
  }
}

.sun {
  animation: 4s color-change infinite alternate linear;
  /* animation-duration animation animation-iteration-count animation-direction animation-timing-function*/
}

@keyframes cloud-move {
  from {
    transform: translate(0, 50px);
  }

  to {
    transform: translate(200px, 50px);
  }
}

.cloud-front {
  animation: 30s cloud-move infinite alternate linear;
}

@keyframes cloud-move-reverse {
  from {
    transform: translate(446px, 48px);
  }

  to {
    transform: translate(100px, 48px);
  }
}

.cloud-back {
  animation: 34s cloud-move-reverse infinite alternate linear;
}
